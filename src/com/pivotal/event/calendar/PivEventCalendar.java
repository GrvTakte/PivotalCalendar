package com.pivotal.event.calendar;

import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.FontImage;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.table.TableLayout;
import java.util.ArrayList;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class PivEventCalendar {
    /**
     * Declare member variable.
     * Member variable can be accessible anywhere in the class.§§§§§§
     */
        private Form current;
        private Resources theme;
        public PivCalendarDatabase DatabaseObj = new PivCalendarDatabase();
        public PivCalendarModel ModelObj = new PivCalendarModel();
        public TextField EventText, DescriptionText, DateLabel;
        public Form pivCalendar;

        public void init(Object context) {
                theme = UIManager.initFirstTheme("/theme");  
                Toolbar.setGlobalToolbar(true);
                DatabaseObj.createDataBase();
               DatabaseObj.findEventDate();
               Log.p("Database and Table  process initiated");
               
        }
    
        public void start() {
                if(current != null){
                current.show();
                return;
        }
                
            pivCalendar = new Form("EventApp",new BoxLayout(BoxLayout.Y_AXIS));
            
            PivDisplayCalendar PDCObject = new PivDisplayCalendar();
            pivCalendar.add(PDCObject);
            /**
             * Local Variable declare.
             * Local variable can be accessible within method.
             */
            Label Date = new Label("Date: ");
            Date.setUIID("TableStyle");
            Label Event = new Label("Event: ");
            Event.setUIID("TableStyle");
            Label Description = new Label("Description: ");
            Description.setUIID("TableStyle");
        
            DateLabel = new TextField();
            DateLabel.setUIID("TableStyle");
            EventText = new TextField("", "Enter Event Name..");
            EventText.setUIID("TableStyle");
            DescriptionText = new TextField("", "Enter Event Description..");
            DescriptionText.setUIID("TableStyle");
        
            Container container1 = TableLayout.encloseIn(2,Date,DateLabel,Event,EventText,Description,DescriptionText);
        
            Toolbar tb = new Toolbar();
            pivCalendar.setToolBar(tb);
            
            tb.setTitle("EventApp");
            tb.addCommandToOverflowMenu("Event Database", FontImage.createMaterial(FontImage.MATERIAL_DATA_USAGE, UIManager.getInstance().getComponentStyle("Title")), (evt) -> {
                            DatabaseObj.displayEvent();
            });
            tb.addCommandToOverflowMenu("Event Map", FontImage.createMaterial(FontImage.MATERIAL_MAP, UIManager.getInstance().getComponentStyle("Title")), (evt) -> {
            });
        
            Button add= new Button("Add");
            add.setUIID("AddClear");
            Button clear = new Button("Clear");
            clear.setUIID("AddClear1");
         
            pivCalendar.add(container1);
            pivCalendar.add(add);
            pivCalendar.add(clear);
            pivCalendar.show();
        
            add.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent evt) {
                            DatabaseObj.insertEvent(DateLabel.getText(), EventText.getText(), DescriptionText.getText());
                            DatabaseObj.displayEvent();
                            if((DateLabel.getText()=="")||(EventText.getText()=="")||(DescriptionText.getText()=="")) {
                                            if((DateLabel.getText()==null)||(EventText.getText()==null)||(DescriptionText.getText()==null)){
                                                                Dialog.show("Required field", "Please fill all the required fields", "OK", "");
                                            }
                            }
            
            
                    }
            });
        
            clear.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent evt) {
                                if((DateLabel!=null) || (EventText!=null) || (DescriptionText!= null)){
                                    if((DateLabel.getText()=="")||(EventText.getText()=="")||(DescriptionText.getText()=="")){
                                    DateLabel.clear();
                                    EventText.clear();
                                    DescriptionText.clear();
                                    }
                                }
                                    
                    }
            });
        
    }
    
        public void checkEvent(ArrayList<String[]> array1,int columns){
                    for(int g=0; g<array1.size();g++){
                                    for(int j=0; j<columns;j++){
                                                Log.p(array1.get(g)[j]);
                                    }
                                    Log.p("**************************");
                    }
        }
    
    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
